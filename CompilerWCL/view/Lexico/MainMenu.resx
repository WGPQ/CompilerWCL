<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAQHAAEHDAABCA0AAgsTAAQSHwAZGRkABRYmAAUXKAAFGCoAFiAqAAcgOQAIJD8AEiM1ACEh
        IgAnKiwAWTY2AFw6OgAIJUIACCZEAAouUQANNFsACzRdAAw2XwAhN00ADDZgAA06ZwAeQ2gADkByAA9D
        dwAPRnsAGkZyABBEeAASSH0APlRqAENDRABGRkcAYUFBAGBERABlRkYAZUhIAGlJSQBpTk4Ab09PAHVX
        VwByWFgAcl9fAHlfXwB4YGAAfGFhAHpqagB/aGgAdHR0AIdsbACFc3MAiHh4AI99fQCTf38Aln9/ABBM
        hgARUI4AElWWABhfpABFb5cAc4OTAHuHkwB6jJ8Ae4+jAIKCggCIiIgAj4yMAJWBgQCbhYUAkI6OAJuJ
        iQCLkpgAlZKSAJWVlQCTmZ8AmZmZAJ6engCij48ApY+PAKSRkQCplpYAq5ubAK2dnQC6kpIAvJaWALiZ
        mQC+mZkAv5ycAI2VoQCOnawAoaGhAKWlpQCnqq0AqampAK2trQCzoaEAtKWlAL2goACwqakAsq2tALyu
        rgCysrIAt7GxALW1tQC/srIAtbi6ALm5uQC8u7sAvb29AMCengDBoaEAw6SkAMSmpgDCqakAxaqqAMOs
        rADErq4AyK2tAMaysgDCtrYAx7a2AMmxsQDOsrIAyrW1AMy1tQDCubkAxbm5AMe/vwDMuroAyb6+AMy9
        vQDQtbUA1r23ANK5uQDWvrkA1L29ANbAuwDXwr4A2sO9ALzCyQDDwcEAwsPEAMbGxgDMwcEAzsXFAMnJ
        yQDNzc0A0sHBANbAwADSxsYA1MXFANjDwwDYxcEA2cXFANjJxADSyckA1cnJANDMzADWzc0A2cnJANzK
        ygDZzMgA387KANjNzQDJztMA0dHRANfR0QDZ0dEA3NHRANrX1wDd1NQA2dnZAN3Y2ADd3d0A4NHNAODR
        0QDg1dUA5NbUAOHZ2QDm2tkA5N7eAOnc2wDp3d0A7N/fAOvg3wDh4eEA5eXlAOri4gDt4eEA7uTjAOnl
        5QDu5eUA6unpAO3q6gDu7e0A8ObmAPHo5wDx6ekA8O3tAPTt7QDw8PAA9vHxAPb19QD48/MA+fX1APr4
        +AD8+voA/v7+AIcAkAClALAAxADPAOEA8ADwEf8A8jH/APRR/wD2cf8A95H/APmx/wD70f8A////AAAA
        AAAbAC8ALQBQAD8AcABSAJAAYwCwAHYAzwCIAPAAmRH/AKYx/wC0Uf8AwnH/AM+R/wDcsf8A69H/AP//
        /wAAAAAACAAvAA4AUAAVAHAAGwCQACEAsAAmAM8ALADwAD4R/wBYMf8AcVH/AIxx/wCmkf8Av7H/ANrR
        /wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWaSko6OdnZ2b
        mJiLi4mJiYeHfn5XAAAAAAAAAAAAAABZuLjK39PT0tLS0dHQ0M/PzcmOzVcAAAAAAAAAAABRMS8wLSgp
        R7bS0tHR0NDPz83NyYjLWAAAAAAAAABVSmqvkmlhXkwyEVTR0dDQz8/Nzc3IistaAAAAAAAAVoGvvcyS
        a2JfUE1GJjqZz8/Pzc3Ny8vJy1oAAAAAAAB7vrHMzJVva2JfUE1GLiYQSMPNzcvLx4rLWwAAAAAAZMzE
        vs7PsZaSbmFeT01NYmczEa7Ly8vDjMtbAAAAAACFzszMzL6vqZaVlXBhTUknNpBHK8vLy8emyXEAAAAA
        ALbSzqhAIhgNCg8kNGFeTSolOL0Qt8vJx7fIcgAAAAAAw9NCFRkWFAwJBAAABkVPkq++xie2ycnBjchy
        AAAAAADKjxccHh0aFAsFAQAAI16WsZ9VLMnJyMCNyHMAAAAAAMptHzs9PCAWEgcCAABEYjc1UnzHycjH
        wbXDdAAAAAAAsLFLPz49IRsTCAMOTcRhMLTLycnIx8fAssF0AAAAAACrxK9hYF1DXEFOkcS9bzhjy8nJ
        yMfHw7ycwXYAAAAAAAAAoMSxlpWVg6GvqWY5gs3LycjHx8PBu5zBdgAAAAAAAAAAAJOTlJRsZFVThc3S
        0dDNycfDwcDAu7t5AAAAAAAAAAAAAACGxcWfhXuT0dLR0M3LycHAwLqewHkAAAAAAAAAAAAAAJnf386D
        e2iT0tHQzcvLw8C7uZ7AfQAAAAAAAAAAAAAAoNPRwoN7aKLS0dDNy8vJwLu5pcB9AAAAAAAAAAAAAACi
        tquiq7bG09LR0M3LycO/ubm7un8AAAAAAAAAAADOxafM0t/f39/T0tHQzcN/enp4d3Z1gAAAAAAAAAAA
        AM7Frt/f39/f39PS0dDNv5fKysnDs2UAAAAAAAAAAAAAAMWr09/f39/f09LR0M3AoN/T0cF2AAAAAAAA
        AAAAAAAAAKvO39/f39/T0tHQzb+n09HDeAAAAAAAAAAAAAAAAAAAqsLf39/f39PS0dDNv6fRyXoAAAAA
        AAAAAAAAAAAAAACtytLf39/f09LR0M2/p8l/AAAAAAAAAAAAAAAAAAAAAK/T0d/f39/T0tHQzb+ahAAA
        AAAAAAAAAAAAAAAAAAAArcXExMTEwsK/uLi2rHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP////////////////+AAAP/gAAD/gAAA/gAAAPwAAAD8AAAA+AAAAPgAAAD4AAAA+AA
        AAPgAAAD4AAAA+AAAAPgAAAD+AAAA/4AAAP/gAAD/4AAA/+AAAP/gAAD/gAAA/4AAAf/AAAP/4AAH/+A
        AD//gAB//4AA//+AAf//////
</value>
  </data>
</root>